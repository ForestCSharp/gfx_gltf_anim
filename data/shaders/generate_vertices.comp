#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require

// minimal SVD implementation for calculating feature points from hermite data
// works in C++ and GLSL

// public domain

// SVD
////////////////////////////////////////////////////////////////////////////////

#define SVD_NUM_SWEEPS 5

const float Tiny_Number = 1.e-20;

void givens_coeffs_sym(float a_pp, float a_pq, float a_qq, out float c, out float s) 
{
    if (a_pq == 0.0) 
    {
        c = 1.0;
        s = 0.0;
        return;
    }
    float tau = (a_qq - a_pp) / (2.0 * a_pq);
    float stt = sqrt(1.0 + tau * tau);
    float tan = 1.0 / ((tau >= 0.0) ? (tau + stt) : (tau - stt));
    c = inversesqrt(1.0 + tan * tan);
    s = tan * c;
}

void svd_rotate_xy(inout float x, inout float y, in float c, in float s) 
{
    float u = x; float v = y;
    x = c * u - s * v;
    y = s * u + c * v;
}

void svd_rotateq_xy(inout float x, inout float y, inout float a, in float c, in float s) 
{
    float cc = c * c; float ss = s * s;
    float mx = 2.0 * c * s * a;
    float u = x; float v = y;
    x = cc * u - mx + ss * v;
    y = ss * u + mx + cc * v;
}

void svd_rotate(inout mat3 vtav, inout mat3 v, in int a, in int b) 
{
    if (vtav[a][b] == 0.0) 
    { 
        return;
    }
    
    float c, s;
    givens_coeffs_sym(vtav[a][a], vtav[a][b], vtav[b][b], c, s);
    svd_rotateq_xy(vtav[a][a],vtav[b][b],vtav[a][b],c,s);
    svd_rotate_xy(vtav[0][3-b], vtav[1-a][2], c, s);
    vtav[a][b] = 0.0;
    
    svd_rotate_xy(v[0][a], v[0][b], c, s);
    svd_rotate_xy(v[1][a], v[1][b], c, s);
    svd_rotate_xy(v[2][a], v[2][b], c, s);
}

void svd_solve_sym(in mat3 a, out vec3 sigma, inout mat3 v) 
{
    // assuming that A is symmetric: can optimize all operations for 
    // the upper right triagonal
    mat3 vtav = a;
    // assuming V is identity: you can also pass a matrix the rotations
    // should be applied to
    // U is not computed
    for (int i = 0; i < SVD_NUM_SWEEPS; ++i) 
    {
        svd_rotate(vtav, v, 0, 1);
        svd_rotate(vtav, v, 0, 2);
        svd_rotate(vtav, v, 1, 2);
    }
    sigma = vec3(vtav[0][0],vtav[1][1],vtav[2][2]);    
}

float svd_invdet(float x, float tol) 
{
    return (abs(x) < tol || abs(1.0 / x) < tol) ? 0.0 : (1.0 / x);
}

void svd_pseudoinverse(out mat3 o, in vec3 sigma, in mat3 v) 
{
    float d0 = svd_invdet(sigma[0], Tiny_Number);
    float d1 = svd_invdet(sigma[1], Tiny_Number);
    float d2 = svd_invdet(sigma[2], Tiny_Number);
    o = mat3(v[0][0] * d0 * v[0][0] + v[0][1] * d1 * v[0][1] + v[0][2] * d2 * v[0][2],
             v[0][0] * d0 * v[1][0] + v[0][1] * d1 * v[1][1] + v[0][2] * d2 * v[1][2],
             v[0][0] * d0 * v[2][0] + v[0][1] * d1 * v[2][1] + v[0][2] * d2 * v[2][2],
             v[1][0] * d0 * v[0][0] + v[1][1] * d1 * v[0][1] + v[1][2] * d2 * v[0][2],
             v[1][0] * d0 * v[1][0] + v[1][1] * d1 * v[1][1] + v[1][2] * d2 * v[1][2],
             v[1][0] * d0 * v[2][0] + v[1][1] * d1 * v[2][1] + v[1][2] * d2 * v[2][2],
             v[2][0] * d0 * v[0][0] + v[2][1] * d1 * v[0][1] + v[2][2] * d2 * v[0][2],
             v[2][0] * d0 * v[1][0] + v[2][1] * d1 * v[1][1] + v[2][2] * d2 * v[1][2],
             v[2][0] * d0 * v[2][0] + v[2][1] * d1 * v[2][1] + v[2][2] * d2 * v[2][2]);
}

void svd_solve_ATA_ATb(in mat3 ATA, in vec3 ATb, out vec3 x) 
{
    mat3 V = mat3(1.0);
    vec3 sigma;
    
    svd_solve_sym(ATA, sigma, V);
    
    // A = UEV^T; U = A / (E*V^T)
    mat3 Vinv;
    svd_pseudoinverse(Vinv, sigma, V);
    x = Vinv * ATb;
}

vec3 svd_vmul_sym(in mat3 a, in vec3 v) 
{
    return vec3(
        dot(a[0],v),
        (a[0][1] * v.x) + (a[1][1] * v.y) + (a[1][2] * v.z),
        (a[0][2] * v.x) + (a[1][2] * v.y) + (a[2][2] * v.z)
    );
}

void svd_mul_ata_sym(out mat3 o, in mat3 a)
{
    o[0][0] = a[0][0] * a[0][0] + a[1][0] * a[1][0] + a[2][0] * a[2][0];
    o[0][1] = a[0][0] * a[0][1] + a[1][0] * a[1][1] + a[2][0] * a[2][1];
    o[0][2] = a[0][0] * a[0][2] + a[1][0] * a[1][2] + a[2][0] * a[2][2];
    o[1][1] = a[0][1] * a[0][1] + a[1][1] * a[1][1] + a[2][1] * a[2][1];
    o[1][2] = a[0][1] * a[0][2] + a[1][1] * a[1][2] + a[2][1] * a[2][2];
    o[2][2] = a[0][2] * a[0][2] + a[1][2] * a[1][2] + a[2][2] * a[2][2];
}
    
void svd_solve_Ax_b(in mat3 a, in vec3 b, out mat3 ATA, out vec3 ATb, out vec3 x) 
{
    svd_mul_ata_sym(ATA, a);
    ATb = b * a; // transpose(a) * b;
    svd_solve_ATA_ATb(ATA, ATb, x);
}

// QEF
////////////////////////////////////////////////////////////////////////////////

void qef_add( in vec3 n, in vec3 p, inout mat3 ATA, inout vec3 ATb, inout vec4 pointaccum)
{ 
    ATA[0][0] += n.x * n.x;
    ATA[0][1] += n.x * n.y;
    ATA[0][2] += n.x * n.z;
    ATA[1][1] += n.y * n.y;
    ATA[1][2] += n.y * n.z;
    ATA[2][2] += n.z * n.z;

    float b = dot(p, n);
    ATb += n * b;
    pointaccum += vec4(p,1.0);
}

float qef_calc_error(in mat3 A, in vec3 x, in vec3 b) 
{
    vec3 vtmp = b - svd_vmul_sym(A, x);
    return dot(vtmp,vtmp);
}

float qef_solve(in mat3 ATA, in vec3 ATb, in vec4 pointaccum, out vec3 x) 
{
    vec3 masspoint = pointaccum.xyz / pointaccum.w;
    ATb -= svd_vmul_sym(ATA, masspoint);
    svd_solve_ATA_ATb(ATA, ATb, x);
    float result = qef_calc_error(ATA, x, ATb);
    
    x += masspoint;
        
    return result;
}

//Example Code

// void main() {
//     vec4 pointaccum = vec4(0.0);
//     mat3 ATA = mat3(0.0);
//     vec3 ATb = vec3(0.0);
    
//     vec3 normals[5] = {
//         normalize(vec3( 1.0,1.0,0.0)),
//         normalize(vec3( 1.0,1.0,0.0)),
//         normalize(vec3(-1.0,1.0,0.0)),
//         normalize(vec3(-1.0,2.0,1.0)),
//         //normalize(vec3(-1.0,1.0,0.0)),
//         normalize(vec3(-1.0,1.0,0.0)),
//     };
//     vec3 points[5] = {
//         vec3(  1.0,0.0,0.3),
//         vec3(  0.9,0.1,-0.5),
//         vec3( -0.8,0.2,0.6),
//         vec3( -1.0,0.0,0.01),
//         vec3( -1.1,-0.1,-0.5),
//     };
    
//     for (int i= 0; i < 5; ++i) {
//         qef_add(normals[i],points[i],ATA,ATb,pointaccum);
//     }
//     vec3 com = pointaccum.xyz / pointaccum.w;
    
//     vec3 x;
//     float error = qef_solve(ATA,ATb,pointaccum,x);

//     printf("masspoint = (%.5f %.5f %.5f)\n", com.x, com.y, com.z);
//     printf("point = (%.5f %.5f %.5f)\n", x.x, x.y, x.z);
//     printf("error = %.5f\n", error);
// }

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1 ) in;

struct Vertex
{
    vec4 position;
    vec4 normal;
};

layout(std430, binding = 0) buffer vertices_buffer
{
    Vertex vertices[];
};

layout(std430, binding = 1) buffer indices_buffer 
{
    int indices[][18];
};

//TODO: Put offset of this dual-contour space here (as well as any other config vars)
layout(std140, binding = 2) uniform ComputeUniform 
{
    vec4 offset;
    float voxel_size;
} settings;

//	Simplex 3D Noise 
//	by Ian McEwan, Ashima Arts
//
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float snoise(vec3 v){ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C 
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

// Permutations
  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients
// ( N*N points uniformly over a square, mapped onto an octahedron.)
  float n_ = 1.0/7.0; // N=7
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}

float fbm(in vec3 position, int octaves)
{
    float value = 0.0;
    float amplitude = 0.5;
    float frequency = 0.0;

    for (int i=0; i < octaves; ++i)
    {
        value += amplitude * snoise(position);
        position *= 2.0; 
        amplitude *= 0.5;
    }

    return value;
}

vec3 hash3( vec2 p )
{
    vec3 q = vec3( dot(p,vec2(127.1,311.7)), 
				   dot(p,vec2(269.5,183.3)), 
				   dot(p,vec2(419.2,371.9)) );
	return fract(sin(q)*43758.5453);
}

//Variable noise that can exhibit the properties of several popular algorithms
// ell noise    u=0,v=0
// voronoi      u=1,v=0
// perlin noise u=0,v1=1
// voronoise    u=1,v=1
float varinoise( in vec2 x, float u, float v )
{
    vec2 p = floor(x);
    vec2 f = fract(x);
		
	float k = 1.0+63.0*pow(1.0-v,4.0);
	
	float va = 0.0;
	float wt = 0.0;
    for( int j=-2; j<=2; j++ )
    for( int i=-2; i<=2; i++ )
    {
        vec2 g = vec2( float(i),float(j) );
		vec3 o = hash3( p + g )*vec3(u,u,1.0);
		vec2 r = g - f + o.xy;
		float d = dot(r,r);
		float ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );
		va += o.z*ww;
		wt += ww;
    }
	
    return va/wt;
}

vec2 random2f( vec2 p )
{	
    // procedural white noise	
	return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
}

vec2 voronoi( in vec2 x )
{
    ivec2 p = ivec2(floor( x ));
    vec2  f = fract( x );

    vec2 res = vec2( 8.0 );
    for( int j=-1; j<=1; j++ )
    for( int i=-1; i<=1; i++ )
    {
        ivec2 b = ivec2( i, j );
        vec2  r = vec2( b ) - f + random2f( vec2(p + b) );
        float d = dot( r, r );

        if( d < res.x )
        {
            res.y = res.x;
            res.x = d;
        }
        else if( d < res.y )
        {
            res.y = d;
        }
    }

    return sqrt( res );
}

vec2 voro_fbm(vec2 position, int octaves)
{
    vec2 value = vec2(0.0,0.0);
    float amplitude = 0.5;
    float frequency = 0.0;

    for (int i=0; i < octaves; ++i)
    {
        value += amplitude * voronoi(position);
        position *= 2.0; 
        amplitude *= 0.5;
    }

    return value;
}

float sdSphere( vec3 p, float s )
{
  return length(p)-s;
}

float sdBox( vec3 p, vec3 b )
{
  vec3 d = abs(p) - b;
  return length(max(d,0.0))
         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf 
}

float sdRoundBox( vec3 p, vec3 b, float r )
{
  vec3 d = abs(p) - b;
  return length(max(d,0.0)) - r
         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf 
}

float opUnion( float d1, float d2 ) {  return min(-d1,d2); }
float opSubtract( float d1, float d2 ) { return max(-d1,d2); } //Subtract d1 from d2
float opIntersect( float d1, float d2 ) { return max(d1,d2); }

float density_function(vec3 position)
{
    vec3 warped_position = position + vec3(
        snoise(position * 0.04) * 8,
        snoise(position * 0.03) * 7,
        snoise(position * 0.02) * 9);

    float fbm_noise = fbm(warped_position / 50.0, 4) * 5;
    
    float density = 0.0;//-position.y - 15;

    density += fbm_noise;
    // density += voro_fbm(vec2(snoise(warped_position * 0.01), snoise(warped_position * 0.009)), 4).x * 20;

    // density = opUnion(density, sdBox(position, vec3(10, 10, 10)));//, 1.0));
    // density = opUnion(density, sdSphere(position + vec3(10, 5, 0), 5));
    // density = opSubtract(sdSphere(position - vec3(6, 0, 6), 8), density);

    // if (density > 0.0)
    // {
    //     density *= fbm_noise;
    // }

    return density;
}

//TODO: make this a macro so arbitrary functions can have a normal function generated
vec3 density_function_normal(vec3 position, float d)
{
    return normalize(vec3(
        (density_function(position + vec3(d,0,0)) - density_function(position - vec3(d,0,0))),
        (density_function(position + vec3(0,d,0)) - density_function(position - vec3(0,d,0))),
        (density_function(position + vec3(0,0,d)) - density_function(position - vec3(0,0,d)))
    ));
}

uint vertex_index(uvec3 pos) 
{
    return gl_NumWorkGroups.x * gl_NumWorkGroups.y * pos.z + gl_NumWorkGroups.x * pos.y + pos.x;
}

float adapt(float f0, float f1)
{
    if ((f0 > 0) != (f1 > 0))
    {
        return (0 - f0) / (f1 - f0);
    }

    return 0.5;
}

#define STORAGE_INDEX vertex_index(gl_GlobalInvocationID)

void main() 
{
    vec3 offset = settings.offset.xyz;
    float voxel_size = settings.voxel_size;

    //local-space voxel position
    vec3 voxel_index = vec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z);

    //Defaulting to non-adaptive ( minecraft-esque )
    vec3 voxel_position = voxel_index * voxel_size + offset;

    //Evaluate at each corner
    float corner_density_values[2][2][2];
    for (int dx=0; dx<2; ++dx)
    {
        for (int dy=0; dy<2; ++dy)
        {
            for (int dz=0; dz<2; ++dz)
            {
                corner_density_values[dx][dy][dz] = density_function(voxel_position + (vec3(dx,dy,dz) * voxel_size));
            }
        }
    }

    vec3 points[12];
    int num_points = 0;

    for (int dx=0; dx<2; ++dx)
    {
        for (int dy=0; dy<2; ++dy)
        {
            if ( (corner_density_values[dx][dy][0] > 0) != (corner_density_values[dx][dy][1] > 0) )
            {
                points[num_points++] = voxel_position + vec3(dx,dy,adapt(corner_density_values[dx][dy][0], corner_density_values[dx][dy][1])) * voxel_size;
            }
        }
    }

    for (int dx=0; dx<2; ++dx)
    {
        for (int dz=0; dz<2; ++dz)
        {
            if ( (corner_density_values[dx][0][dz] > 0) != (corner_density_values[dx][1][dz] > 0) )
            {
                points[num_points++] = voxel_position + vec3(dx,adapt(corner_density_values[dx][0][dz], corner_density_values[dx][1][dz]), dz) * voxel_size;
            }
        }
    }

    for (int dy=0; dy<2; ++dy)
    {
        for (int dz=0; dz<2; ++dz)
        {
            if ( (corner_density_values[0][dy][dz] > 0) != (corner_density_values[1][dy][dz] > 0) )
            {
                points[num_points++] = voxel_position + vec3(adapt(corner_density_values[0][dy][dz], corner_density_values[1][dy][dz]), dy, dz) * voxel_size;
            }
        }
    }

    vec3 normals[12];
    for (int i=0; i < num_points; ++i)
    {
        normals[i] = density_function_normal(points[i],voxel_size);
    }

    //Solve QEF
    mat3 ATA = mat3(0.0);
    vec3 ATb = vec3(0.0);
    vec4 pointaccum = vec4(0.0);

    for (int i=0; i < num_points; ++i)
    {
        qef_add(normals[i],points[i],ATA,ATb,pointaccum);
    }
    vec3 center_of_mass = pointaccum.xyz / pointaccum.w;

    vec3 qef_result;
    float error = qef_solve(ATA,ATb,pointaccum,qef_result);

    //FIXME: quick fix for qef results that are outside voxel
    if (length(qef_result - voxel_position) > voxel_size)
    {
        qef_result = center_of_mass;
    }

    //FIXME: QEF_Solve producing some pretty nasty results
    //FIXME: even with distance check above, QEF is no better than just using the center of mass
    //TODO: test that the QEF is actually working

    vec3 normal = density_function_normal(qef_result, voxel_size);
    // if (num_points ==0) normal = vec3(0.0, 0.0, 0.0);
    // else if (num_points == 1)  normal = vec3(1.0, 0.0, 0.0);
    // else if (num_points == 2)  normal = vec3(0.0, 1.0, 0.0);
    // else if (num_points == 3)  normal = vec3(0.0, 0.0, 1.0);
    // else if (num_points == 4)  normal = vec3(0.0, 1.0, 1.0);
    // else if (num_points == 5)  normal = vec3(1.0, 1.0, 0.0);
    // else if (num_points == 6)  normal = vec3(1.0, 0.0, 1.0);
    // else if (num_points == 7)  normal = vec3(0.5, 0.5, 0.5);
    // else if (num_points == 8)  normal = vec3(0.5, 0.0, 0.0);
    // else if (num_points == 9)  normal = vec3(0.0, 0.5, 0.0);
    // else if (num_points == 10) normal = vec3(0.0, 0.0, 0.5);
    // else if (num_points == 11) normal = vec3(0.5, 0.5, 0.0);
    // else if (num_points == 12) normal = vec3(1.0, 1.0, 1.0);

    vertices[STORAGE_INDEX].position = vec4(qef_result, 1.0);
    vertices[STORAGE_INDEX].normal = vec4(normal, 1.0);//density_function_normal(qef_result, voxel_size), 1.0);

    //Zero Out Indices
    for (int i = 0; i < 18; ++i)
    {
        indices[STORAGE_INDEX][i] = -1;
    }

    if (voxel_index.x > 0 && voxel_index.y > 0)
    {
        bool solid1 = density_function(voxel_position) > 0.0;
        bool solid2 = density_function(voxel_position + vec3(0,0,voxel_size)) > 0.0;
        if (solid1 != solid2)
        {
            indices[STORAGE_INDEX][0] = int(vertex_index(uvec3(voxel_index.x - 1, voxel_index.y - 1, voxel_index.z)));
            indices[STORAGE_INDEX][1] = int(vertex_index(uvec3(voxel_index.x, voxel_index.y - 1, voxel_index.z)));
            indices[STORAGE_INDEX][2] = int(vertex_index(uvec3(voxel_index.x, voxel_index.y, voxel_index.z)));
            indices[STORAGE_INDEX][3] = int(vertex_index(uvec3(voxel_index.x, voxel_index.y, voxel_index.z)));
            indices[STORAGE_INDEX][4] = int(vertex_index(uvec3(voxel_index.x - 1, voxel_index.y, voxel_index.z)));
            indices[STORAGE_INDEX][5] = int(vertex_index(uvec3(voxel_index.x - 1, voxel_index.y - 1, voxel_index.z)));
        }
    }

    if (voxel_index.x > 0 && voxel_index.z > 0)
    {
        bool solid1 = density_function(voxel_position) > 0.0;
        bool solid2 = density_function(voxel_position + vec3(0,voxel_size,0)) > 0.0;
        if (solid1 != solid2)
        {
            indices[STORAGE_INDEX][6]  = int(vertex_index(uvec3(voxel_index.x - 1, voxel_index.y, voxel_index.z - 1)));
            indices[STORAGE_INDEX][7]  = int(vertex_index(uvec3(voxel_index.x, voxel_index.y, voxel_index.z - 1)));
            indices[STORAGE_INDEX][8]  = int(vertex_index(uvec3(voxel_index.x, voxel_index.y, voxel_index.z)));
            indices[STORAGE_INDEX][9]  = int(vertex_index(uvec3(voxel_index.x, voxel_index.y, voxel_index.z)));
            indices[STORAGE_INDEX][10] = int(vertex_index(uvec3(voxel_index.x - 1, voxel_index.y, voxel_index.z)));
            indices[STORAGE_INDEX][11] = int(vertex_index(uvec3(voxel_index.x - 1, voxel_index.y, voxel_index.z - 1)));
        }
    }

    if (voxel_index.y > 0 && voxel_index.z > 0)
    {
        bool solid1 = density_function(voxel_position) > 0.0;
        bool solid2 = density_function(voxel_position + vec3(voxel_size,0,0)) > 0.0;
        if (solid1 != solid2)
        {
            indices[STORAGE_INDEX][12] = int(vertex_index(uvec3(voxel_index.x, voxel_index.y - 1, voxel_index.z - 1)));
            indices[STORAGE_INDEX][13] = int(vertex_index(uvec3(voxel_index.x, voxel_index.y, voxel_index.z - 1)));
            indices[STORAGE_INDEX][14] = int(vertex_index(uvec3(voxel_index.x, voxel_index.y, voxel_index.z)));
            indices[STORAGE_INDEX][15] = int(vertex_index(uvec3(voxel_index.x, voxel_index.y, voxel_index.z)));
            indices[STORAGE_INDEX][16] = int(vertex_index(uvec3(voxel_index.x, voxel_index.y - 1, voxel_index.z)));
            indices[STORAGE_INDEX][17] = int(vertex_index(uvec3(voxel_index.x, voxel_index.y - 1, voxel_index.z - 1)));
        }
    }
}