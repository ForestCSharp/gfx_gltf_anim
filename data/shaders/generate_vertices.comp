#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require

// minimal SVD implementation for calculating feature points from hermite data
// works in C++ and GLSL

// public domain

// SVD
////////////////////////////////////////////////////////////////////////////////

#define SVD_NUM_SWEEPS 5

const float Tiny_Number = 1.e-20;

void givens_coeffs_sym(float a_pp, float a_pq, float a_qq, out float c, out float s) 
{
    if (a_pq == 0.0) 
    {
        c = 1.0;
        s = 0.0;
        return;
    }
    float tau = (a_qq - a_pp) / (2.0 * a_pq);
    float stt = sqrt(1.0 + tau * tau);
    float tan = 1.0 / ((tau >= 0.0) ? (tau + stt) : (tau - stt));
    c = inversesqrt(1.0 + tan * tan);
    s = tan * c;
}

void svd_rotate_xy(inout float x, inout float y, in float c, in float s) 
{
    float u = x; float v = y;
    x = c * u - s * v;
    y = s * u + c * v;
}

void svd_rotateq_xy(inout float x, inout float y, inout float a, in float c, in float s) 
{
    float cc = c * c; float ss = s * s;
    float mx = 2.0 * c * s * a;
    float u = x; float v = y;
    x = cc * u - mx + ss * v;
    y = ss * u + mx + cc * v;
}

void svd_rotate(inout mat3 vtav, inout mat3 v, in int a, in int b) 
{
    if (vtav[a][b] == 0.0) 
    { 
        return;
    }
    
    float c, s;
    givens_coeffs_sym(vtav[a][a], vtav[a][b], vtav[b][b], c, s);
    svd_rotateq_xy(vtav[a][a],vtav[b][b],vtav[a][b],c,s);
    svd_rotate_xy(vtav[0][3-b], vtav[1-a][2], c, s);
    vtav[a][b] = 0.0;
    
    svd_rotate_xy(v[0][a], v[0][b], c, s);
    svd_rotate_xy(v[1][a], v[1][b], c, s);
    svd_rotate_xy(v[2][a], v[2][b], c, s);
}

void svd_solve_sym(in mat3 a, out vec3 sigma, inout mat3 v) 
{
    // assuming that A is symmetric: can optimize all operations for 
    // the upper right triagonal
    mat3 vtav = a;
    // assuming V is identity: you can also pass a matrix the rotations
    // should be applied to
    // U is not computed
    for (int i = 0; i < SVD_NUM_SWEEPS; ++i) 
    {
        svd_rotate(vtav, v, 0, 1);
        svd_rotate(vtav, v, 0, 2);
        svd_rotate(vtav, v, 1, 2);
    }
    sigma = vec3(vtav[0][0],vtav[1][1],vtav[2][2]);    
}

float svd_invdet(float x, float tol) 
{
    return (abs(x) < tol || abs(1.0 / x) < tol) ? 0.0 : (1.0 / x);
}

void svd_pseudoinverse(out mat3 o, in vec3 sigma, in mat3 v) 
{
    float d0 = svd_invdet(sigma[0], Tiny_Number);
    float d1 = svd_invdet(sigma[1], Tiny_Number);
    float d2 = svd_invdet(sigma[2], Tiny_Number);
    o = mat3(v[0][0] * d0 * v[0][0] + v[0][1] * d1 * v[0][1] + v[0][2] * d2 * v[0][2],
             v[0][0] * d0 * v[1][0] + v[0][1] * d1 * v[1][1] + v[0][2] * d2 * v[1][2],
             v[0][0] * d0 * v[2][0] + v[0][1] * d1 * v[2][1] + v[0][2] * d2 * v[2][2],
             v[1][0] * d0 * v[0][0] + v[1][1] * d1 * v[0][1] + v[1][2] * d2 * v[0][2],
             v[1][0] * d0 * v[1][0] + v[1][1] * d1 * v[1][1] + v[1][2] * d2 * v[1][2],
             v[1][0] * d0 * v[2][0] + v[1][1] * d1 * v[2][1] + v[1][2] * d2 * v[2][2],
             v[2][0] * d0 * v[0][0] + v[2][1] * d1 * v[0][1] + v[2][2] * d2 * v[0][2],
             v[2][0] * d0 * v[1][0] + v[2][1] * d1 * v[1][1] + v[2][2] * d2 * v[1][2],
             v[2][0] * d0 * v[2][0] + v[2][1] * d1 * v[2][1] + v[2][2] * d2 * v[2][2]);
}

void svd_solve_ATA_ATb(in mat3 ATA, in vec3 ATb, out vec3 x) 
{
    mat3 V = mat3(1.0);
    vec3 sigma;
    
    svd_solve_sym(ATA, sigma, V);
    
    // A = UEV^T; U = A / (E*V^T)
    mat3 Vinv;
    svd_pseudoinverse(Vinv, sigma, V);
    x = Vinv * ATb;
}

vec3 svd_vmul_sym(in mat3 a, in vec3 v) 
{
    return vec3(
        dot(a[0],v),
        (a[0][1] * v.x) + (a[1][1] * v.y) + (a[1][2] * v.z),
        (a[0][2] * v.x) + (a[1][2] * v.y) + (a[2][2] * v.z)
    );
}

void svd_mul_ata_sym(out mat3 o, in mat3 a)
{
    o[0][0] = a[0][0] * a[0][0] + a[1][0] * a[1][0] + a[2][0] * a[2][0];
    o[0][1] = a[0][0] * a[0][1] + a[1][0] * a[1][1] + a[2][0] * a[2][1];
    o[0][2] = a[0][0] * a[0][2] + a[1][0] * a[1][2] + a[2][0] * a[2][2];
    o[1][1] = a[0][1] * a[0][1] + a[1][1] * a[1][1] + a[2][1] * a[2][1];
    o[1][2] = a[0][1] * a[0][2] + a[1][1] * a[1][2] + a[2][1] * a[2][2];
    o[2][2] = a[0][2] * a[0][2] + a[1][2] * a[1][2] + a[2][2] * a[2][2];
}
    
void svd_solve_Ax_b(in mat3 a, in vec3 b, out mat3 ATA, out vec3 ATb, out vec3 x) 
{
    svd_mul_ata_sym(ATA, a);
    ATb = b * a; // transpose(a) * b;
    svd_solve_ATA_ATb(ATA, ATb, x);
}

// QEF
////////////////////////////////////////////////////////////////////////////////

void qef_add( in vec3 n, in vec3 p, inout mat3 ATA, inout vec3 ATb, inout vec4 pointaccum)
{ 
    ATA[0][0] += n.x * n.x;
    ATA[0][1] += n.x * n.y;
    ATA[0][2] += n.x * n.z;
    ATA[1][1] += n.y * n.y;
    ATA[1][2] += n.y * n.z;
    ATA[2][2] += n.z * n.z;

    float b = dot(p, n);
    ATb += n * b;
    pointaccum += vec4(p,1.0);
}

float qef_calc_error(in mat3 A, in vec3 x, in vec3 b) 
{
    vec3 vtmp = b - svd_vmul_sym(A, x);
    return dot(vtmp,vtmp);
}

float qef_solve(in mat3 ATA, in vec3 ATb, in vec4 pointaccum, out vec3 x) 
{
    vec3 masspoint = pointaccum.xyz / pointaccum.w;
    ATb -= svd_vmul_sym(ATA, masspoint);
    svd_solve_ATA_ATb(ATA, ATb, x);
    float result = qef_calc_error(ATA, x, ATb);
    
    x += masspoint;
        
    return result;
}

//Example Code

// int main(void) {
//     vec4 pointaccum = vec4(0.0);
//     mat3 ATA = mat3(0.0);
//     vec3 ATb = vec3(0.0);
    
//     #define COUNT 5
//     vec3 normals[COUNT] = {
//         normalize(vec3( 1.0,1.0,0.0)),
//         normalize(vec3( 1.0,1.0,0.0)),
//         normalize(vec3(-1.0,1.0,0.0)),
//         normalize(vec3(-1.0,2.0,1.0)),
//         //normalize(vec3(-1.0,1.0,0.0)),
//         normalize(vec3(-1.0,1.0,0.0)),
//     };
//     vec3 points[COUNT] = {
//         vec3(  1.0,0.0,0.3),
//         vec3(  0.9,0.1,-0.5),
//         vec3( -0.8,0.2,0.6),
//         vec3( -1.0,0.0,0.01),
//         vec3( -1.1,-0.1,-0.5),
//     };
    
//     for (int i= 0; i < COUNT; ++i) {
//         qef_add(normals[i],points[i],ATA,ATb,pointaccum);
//     }
//     vec3 com = pointaccum.xyz / pointaccum.w;
    
//     vec3 x;
//     float error = qef_solve(ATA,ATb,pointaccum,x);

//     printf("masspoint = (%.5f %.5f %.5f)\n", com.x, com.y, com.z);
//     printf("point = (%.5f %.5f %.5f)\n", x.x, x.y, x.z);
//     printf("error = %.5f\n", error);

// #if SVD_COMPARE_REFERENCE
//     double a[COUNT*3];
//     double b[COUNT];
    
//     for (int i = 0; i < COUNT; ++i) {
//         b[i] = (points[i].x - com.x)*normals[i].x
//              + (points[i].y - com.y)*normals[i].y
//              + (points[i].z - com.z)*normals[i].z;
//         a[i] = normals[i].x;
//         a[i+COUNT] = normals[i].y;
//         a[i+2*COUNT] = normals[i].z;
//     }
    
//     double *c = svd_solve(5,3,a,b,0.1);
    
//     vec3 result = com + vec3(c[0], c[1], c[2]);
//     r8_free(c);
//     printf("reference="); dump_vec3(result);
// #endif
    
//     return 0;
// }
// #endif

// #endif

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1 ) in;

layout(std430, binding = 0) buffer vertices_buffer
{
    vec4 vertices[];
};

layout(std430, binding = 1) buffer indices_buffer 
{
    int indices[][18];
};

//TODO: Put offset of this dual-contour space here (as well as any other config vars)
layout(std140, binding = 2) uniform ComputeUniform 
{
    vec4 uniform_value;
};

//	Simplex 3D Noise 
//	by Ian McEwan, Ashima Arts
//
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float snoise(vec3 v){ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C 
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

// Permutations
  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients
// ( N*N points uniformly over a square, mapped onto an octahedron.)
  float n_ = 1.0/7.0; // N=7
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}

float distribution_function(vec3 position)
{
    return snoise(position / 100.0);
}

//#define STORAGE_INDEX gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_GlobalInvocationID.z + gl_NumWorkGroups.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x

uint vertex_index(uvec3 pos) 
{
    return gl_NumWorkGroups.x * gl_NumWorkGroups.y * pos.z + gl_NumWorkGroups.x * pos.y + pos.x;
}

#define STORAGE_INDEX vertex_index(gl_GlobalInvocationID)

void main() 
{
    //TODO: pass this in uniform
    vec3 offset = vec3(0,0,0);

    vec3 voxel_position = vec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z);

    //Default to non-adaptive
    vec3 vertex = voxel_position + 0.5;

    //TODO: Contouring

    // TODO: Test that vertex is valid (that we're on the surface boundary)
    vertices[STORAGE_INDEX] = vec4(vertex, 1.0);

    if (voxel_position.x > 0 + offset.x && voxel_position.y > 0 + offset.y)
    {
        bool solid1 = distribution_function(voxel_position) > 0.0;
        bool solid2 = distribution_function(voxel_position + vec3(0,0,1)) > 0.0;
        if (solid1 != solid2)
        {
            indices[STORAGE_INDEX][0] = int(vertex_index(uvec3(voxel_position.x - 1, voxel_position.y - 1, voxel_position.z)));
            indices[STORAGE_INDEX][1] = int(vertex_index(uvec3(voxel_position.x, voxel_position.y - 1, voxel_position.z)));
            indices[STORAGE_INDEX][2] = int(vertex_index(uvec3(voxel_position.x, voxel_position.y, voxel_position.z)));
            indices[STORAGE_INDEX][3] = int(vertex_index(uvec3(voxel_position.x, voxel_position.y - 1, voxel_position.z)));
            indices[STORAGE_INDEX][4] = int(vertex_index(uvec3(voxel_position.x, voxel_position.y, voxel_position.z)));
            indices[STORAGE_INDEX][5] = int(vertex_index(uvec3(voxel_position.x - 1, voxel_position.y, voxel_position.z)));
        }
    }

    if (voxel_position.x > 0 + offset.x && voxel_position.z > 0 + offset.z)
    {
        bool solid1 = distribution_function(voxel_position) > 0.0;
        bool solid2 = distribution_function(voxel_position + vec3(0,1,0)) > 0.0;
        if (solid1 != solid2)
        {
            indices[STORAGE_INDEX][6]  = int(vertex_index(uvec3(voxel_position.x - 1, voxel_position.y, voxel_position.z - 1)));
            indices[STORAGE_INDEX][7]  = int(vertex_index(uvec3(voxel_position.x, voxel_position.y, voxel_position.z - 1)));
            indices[STORAGE_INDEX][8]  = int(vertex_index(uvec3(voxel_position.x, voxel_position.y, voxel_position.z)));
            indices[STORAGE_INDEX][9]  = int(vertex_index(uvec3(voxel_position.x, voxel_position.y, voxel_position.z - 1)));
            indices[STORAGE_INDEX][10] = int(vertex_index(uvec3(voxel_position.x, voxel_position.y, voxel_position.z)));
            indices[STORAGE_INDEX][11] = int(vertex_index(uvec3(voxel_position.x - 1, voxel_position.y, voxel_position.z)));
        }
    }

    if (voxel_position.y > 0 + offset.y && voxel_position.z > 0 + offset.z)
    {
        bool solid1 = distribution_function(voxel_position) > 0.0;
        bool solid2 = distribution_function(voxel_position + vec3(1,0,0)) > 0.0;
        if (solid1 != solid2)
        {
            indices[STORAGE_INDEX][12] = int(vertex_index(uvec3(voxel_position.x, voxel_position.y - 1, voxel_position.z - 1)));
            indices[STORAGE_INDEX][13] = int(vertex_index(uvec3(voxel_position.x, voxel_position.y, voxel_position.z - 1)));
            indices[STORAGE_INDEX][14] = int(vertex_index(uvec3(voxel_position.x, voxel_position.y, voxel_position.z)));
            indices[STORAGE_INDEX][15] = int(vertex_index(uvec3(voxel_position.x, voxel_position.y, voxel_position.z - 1)));
            indices[STORAGE_INDEX][16] = int(vertex_index(uvec3(voxel_position.x, voxel_position.y, voxel_position.z)));
            indices[STORAGE_INDEX][17] = int(vertex_index(uvec3(voxel_position.x, voxel_position.y - 1, voxel_position.z)));
        }
    }
}